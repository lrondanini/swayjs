{"version":3,"file":"swayjs.js","sourceRoot":"","sources":["../../src/core/swayjs.ts"],"names":[],"mappings":"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","sourcesContent":["import http, { IncomingMessage, ServerResponse } from 'http';\nimport https from 'https';\nimport FindMyWay, { HTTPVersion } from 'find-my-way';\nimport Builder, { MethodInfo, RouteInfo } from './builder';\nimport Logger, { ILogger, RequestLogger } from './logger';\nimport { RestMethod } from './types';\nimport { AppContext, RequestContext } from './context';\nimport CorsManager, { CorsOptions } from './cors';\nimport { ValidationFunction, Validator } from './validator/validator';\nimport { InternalServerErrorException, UnprocessableEntityException } from './exceptions';\n\n\nexport interface SwayJsConfiguration {\n  port: number;\n  key?: string;\n  cert?: string;\n  routesFolder?: string;\n  corsOptions?: CorsOptions;\n  noCorsMode?: boolean;\n  hideLogo?: boolean;\n  hideRoutesListOnLoad?: boolean;\n}\n\nexport type MiddlewareFunction = (req: IncomingMessage, res: ServerResponse, reqContext?: RequestContext) => RequestContext | undefined | Promise<RequestContext | undefined>;\n\nexport default class SwayJs {\n  private server: http.Server | https.Server;\n  private configuration: SwayJsConfiguration;\n  private logManager: Logger;\n  private middlewares: Function[] = [];\n  private router: FindMyWay.Instance<HTTPVersion>;\n  private corsManager: CorsManager;\n  private requestValidator: Validator;\n  private appContext: AppContext = new AppContext();\n  private branchMiddlewares: { [name: string]: any };\n  private branchMiddlewaresList: string[];\n\n  static async CreateServer(config: SwayJsConfiguration, logManager?: ILogger): Promise<SwayJs> {\n    const server = new SwayJs(config, logManager);\n    await server.initRouters();\n    if (!config.hideRoutesListOnLoad) {\n      console.log('\\x1b[35m');\n      console.log('Routes:')\n      console.log('  ' + server.getRouterMap());\n      console.log('\\x1b[0m');\n    }\n    return server;\n  }\n\n  constructor(config: SwayJsConfiguration, logManager?: ILogger) {\n    this.configuration = config;\n    if (!this.configuration.noCorsMode) {\n      this.configuration.noCorsMode = false;\n    }\n    this.logManager = new Logger(logManager);\n    this.corsManager = new CorsManager(config.corsOptions);\n    this.requestValidator = new Validator();\n    this.branchMiddlewares = {};\n    this.branchMiddlewaresList = [];\n    this.printLogo();\n  }\n\n  private printLogo() {\n    if (!this.configuration.hideLogo) {\n      console.log('\\x1b[36m');\n      console.log('powered by');\n      console.log(' _____      ____ _ _   _ (_)___ ');\n      console.log('/ __\\\\ \\\\ /\\\\ / / _` | | | || / __|');\n      console.log('\\\\__ \\\\\\\\ V  V / (_| | |_| || \\\\__ \\\\');\n      console.log('|___/ \\\\_/\\\\_/ \\\\__,_|\\\\__, |/ |___/');\n      console.log('                   |___/__/     \\x1b[0m');\n    }\n  }\n\n  private addBranchMiddleware(routeInfo: string, routeClass: any) {\n    this.branchMiddlewares[routeInfo] = routeClass;\n\n    this.branchMiddlewaresList.push(routeInfo);\n    this.branchMiddlewaresList = this.branchMiddlewaresList.sort((a, b) => a.length - b.length); //sort is important t apply the middlewares in the correct order\n  }\n\n  private async applyBranchMiddlewares(route: string, requestContext: RequestContext): Promise<RequestContext> {\n    if (this.branchMiddlewaresList.length === 0) {\n      return requestContext;\n    }\n\n    for (const mw of this.branchMiddlewaresList) {\n      if (route.startsWith(mw)) {\n        requestContext = await this.branchMiddlewares[mw].BranchMiddleware(requestContext);\n      }\n    }\n\n  }\n\n  private async initRouters() {\n    const r = FindMyWay<HTTPVersion>({\n      ignoreTrailingSlash: true,\n      ignoreDuplicateSlashes: true,\n      defaultRoute: (req, res) => {\n        const requestLogger = new RequestLogger(this.logManager);\n        requestLogger.setError(404, 'Not Found');\n        res.statusCode = 404;\n        res.end();\n        requestLogger.log(req);\n      }\n    });\n\n    //to change the query string parser (eg to qs):\n    // const qs = require('qs')\n    // const r = FindMyWay({\n    //   .......\n    //   querystringParser: str => qs.parse(str)\n    // })\n\n    const builder = new Builder(this.logManager, this.configuration.routesFolder);\n\n\n\n    for (const routeInfo of builder.routes) {\n      // console.log(routeInfo);\n\n      const routeClassType = await import(routeInfo.filePath);\n\n      let routeClassImported: any;\n      if (routeClassType.default) {\n        routeClassImported = routeClassType.default\n      } else {\n        for (const obj of Object.keys(routeClassType)) {\n          if (obj.toLowerCase() === routeInfo.className.toLowerCase()) {\n            routeClassImported = routeClassType[obj];\n          }\n        }\n      }\n\n      // console.log(routeInfo.filePath, routeInfo.className, Object.keys(routeClassType), routeClassType);\n      const routeClass = new routeClassImported(this.appContext);\n\n      if (routeInfo.hasBranchMiddleware) {\n        this.addBranchMiddleware(routeInfo.route, routeClass);\n      }\n\n      const _self = this;\n      for (const method of routeInfo.methods) {\n        r.on(method.restMethod, routeInfo.route, async function (req: any, res: any, params: any, store: any, searchParams: any) {\n          const reqCtx = await _self.applyBranchMiddlewares(routeInfo.route, this);\n          _self.handleRoute(req, res, params, searchParams, method, routeClass, reqCtx); //requestContext = this is set as 3rd parameter of lookup\n        });\n      }\n    }\n\n    this.router = r;\n  }\n\n  private async handleRoute(req: IncomingMessage, res: ServerResponse, params, searchParams, method: MethodInfo, routeClass: any, requestContext: RequestContext) {\n    let skipValidation = false;\n    let blockExecution = false;\n\n    const requestLogger = new RequestLogger(this.logManager);\n\n    let body: any;\n\n    if (!blockExecution) {\n      if (method.aspectsParams) {\n        let validationErrors: string[] = [];\n\n\n        if (method.restMethod == RestMethod.GET || method.restMethod == RestMethod.DELETE) {\n          skipValidation = routeClass['skipGetInputValidation'];\n          if (!skipValidation) {\n            skipValidation = routeClass['skipDeleteInputValidation'];\n          }\n\n          if (method.validationRules) {\n            //searchParams is already an object   \n            try {\n              body = this.requestValidator.parseQueryString(method.validationRules, searchParams);\n            } catch (e) {\n              this.logManager.error('Cannot parse body', e);\n              const err = new UnprocessableEntityException('Cannot parse query params')\n              requestLogger.setError(err.getCode(), err.getTypeAsString());\n              err.send(res);\n              requestLogger.log(req);\n            }\n          } else {\n            body = searchParams;\n          }\n        } else if (method.restMethod == RestMethod.POST || method.restMethod == RestMethod.PUT || method.restMethod == RestMethod.PATCH) {\n          skipValidation = routeClass['skipPostInputValidation'];\n          if (!skipValidation) {\n            skipValidation = routeClass['skipPutInputValidation'];\n          }\n          if (!skipValidation) {\n            skipValidation = routeClass['skipPatchInputValidation'];\n          }\n          try {\n            body = await this.getBody(req);\n          } catch (e) {\n            this.logManager.error('Cannot parse body', e);\n            const err = new UnprocessableEntityException('Cannot parse body');\n            requestLogger.setError(err.getCode(), err.getTypeAsString());\n            err.send(res);\n            requestLogger.log(req);\n          }\n        }\n\n        if (body) {\n          if (!skipValidation) {\n            skipValidation = routeClass['skipInputValidation']; //applies to all methods\n          }\n\n          if (!skipValidation && method.validationRules) {\n            validationErrors = this.requestValidator.validate(method.validationRules, body);\n          }\n\n          if (validationErrors.length > 0 && !skipValidation) {\n            this.logManager.error('Validation errors:\\n' + validationErrors.join('\\n'));\n            const err = new UnprocessableEntityException('Validation errors:\\n' + validationErrors.join('\\n'));\n            requestLogger.setError(err.getCode(), err.getTypeAsString());\n            err.send(res);\n            requestLogger.log(req);\n          } else {\n            let result: any;\n            let noErrors = true;\n            try {\n              result = await routeClass[method.name](requestContext, body, params);\n            } catch (e) {\n              noErrors = false;\n              result = undefined;\n              this.logManager.error(e);\n              const err = new InternalServerErrorException(e.message);\n              requestLogger.setError(err.getCode(), err.getTypeAsString());\n              err.send(res);\n              requestLogger.log(req);\n            }\n\n            if (noErrors) {\n              if (result) {\n                res.end(JSON.stringify(result));\n              } else {\n                res.end();\n              }\n              requestLogger.log(req);\n            }\n\n          }\n        }\n\n      } else {\n        res.end(JSON.stringify(await routeClass[method.name](requestContext)));\n      }\n    }\n\n  }\n\n  private getBody(request: IncomingMessage): any {\n    return new Promise((resolve) => {\n      const bodyParts: any[] = [];\n      let body;\n      request.on('data', (chunk) => {\n        bodyParts.push(chunk);\n      }).on('end', () => {\n        body = Buffer.concat(bodyParts).toString();\n        resolve(JSON.parse(body));\n      });\n    });\n  }\n\n  addCustomValidationFunction(name: string, fn: ValidationFunction) {\n    this.requestValidator.addValidationFunction(name, fn);\n  }\n\n  addToAppContext(key: string, value: any) {\n    this.appContext.add(key, value);\n  }\n\n  getRouterMap(): string {\n    return this.router.prettyPrint();\n  }\n\n  async run() {\n    if (this.configuration.key && this.configuration.cert) {\n      this.server = https.createServer((req: IncomingMessage, res: ServerResponse) => {\n        this.handleRequest(req, res);\n      })\n    } else {\n      this.server = http.createServer((req: IncomingMessage, res: ServerResponse) => {\n        this.handleRequest(req, res);\n      })\n    }\n    this.logManager.log('\\x1b[34mListening on port: ' + this.configuration.port + '\\x1b[0m\\n');\n    this.server.listen(this.configuration.port);\n  }\n\n  //Context\n  async use(fn: MiddlewareFunction): Promise<void> {\n    this.middlewares.push(fn);\n  }\n\n  private async handleRequest(req: IncomingMessage, res: ServerResponse) {\n    let continueProcess = true;\n    const method = req.method && req.method.toUpperCase && req.method.toUpperCase();\n\n    if (method === RestMethod.OPTIONS && req.url) {\n      const handle = this.router.find(method, req.url);\n      if (handle) {\n        continueProcess = false;\n        await handle.handler(req, res, handle.params, handle.store, handle.searchParams);\n      }\n    }\n\n    if (continueProcess && !this.configuration.noCorsMode) {\n      //sets the headers for CORS and handles OPTIONS preflight requests\n      continueProcess = this.corsManager.handleRequest(req, res);\n    }\n\n    let requestContext = new RequestContext(req, res);\n\n    if (continueProcess) {\n      for (const fn of this.middlewares) {\n        try {\n          const r = await fn(req, res, requestContext);\n          if (r) {\n            requestContext = r;\n          }\n        } catch (err) {\n          continueProcess = false;\n          new InternalServerErrorException(err.message).send(res);\n        }\n      }\n    }\n\n    if (continueProcess) {\n      await this.router.lookup(req, res, requestContext);\n    }\n  }\n\n}"]}