{"version":3,"file":"swayjs.js","sourceRoot":"","sources":["../../src/core/swayjs.ts"],"names":[],"mappings":"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","sourcesContent":["import http, { IncomingMessage, ServerResponse } from 'http';\nimport https from 'https';\nimport FindMyWay, { HTTPVersion } from 'find-my-way';\nimport qs from 'querystring';\nimport Builder, { MethodInfo, RouteInfo } from './builder';\nimport Logger, { ILogger } from './logger';\nimport { RestMethod } from './types';\nimport { AppContext, RequestContext } from './context';\nimport CorsManager, { CorsOptions } from './cors';\nimport { ValidationFunction, Validator } from './validator/validator';\nimport { BadRequestException, InternalServerErrorException, UnprocessableEntityException } from './exceptions';\n\n\nexport interface SwayJsConfiguration {\n  port: number;\n  key?: string;\n  cert?: string;\n  routesFolder?: string;\n  corsOptions?: CorsOptions;\n  noCorsMode?: boolean;\n}\n\nexport type MiddlewareFunction = (req: IncomingMessage, res: ServerResponse, reqContext?: RequestContext) => RequestContext | undefined | Promise<RequestContext | undefined>;\n\nexport default class SwayJs {\n  private server: http.Server | https.Server;\n  private configuration: SwayJsConfiguration;\n  private logManager: Logger;\n  private middlewares: Function[] = [];\n  private router: FindMyWay.Instance<HTTPVersion>;\n  private corsManager: CorsManager;\n  private requestValidator: Validator;\n  private appContext: AppContext = new AppContext();\n\n  static async createServer(config: SwayJsConfiguration, logManager?: ILogger): Promise<SwayJs> {\n    const instance = new SwayJs(config, logManager);\n    await instance.initRouters();\n    return instance;\n  }\n\n  constructor(config: SwayJsConfiguration, logManager?: ILogger) {\n    this.configuration = config;\n    if (!this.configuration.noCorsMode) {\n      this.configuration.noCorsMode = false;\n    }\n    this.logManager = new Logger(logManager);\n    this.corsManager = new CorsManager(config.corsOptions);\n    this.requestValidator = new Validator();    \n  }\n\n  private async initRouters() {\n    const r = FindMyWay<HTTPVersion>({\n      ignoreTrailingSlash: true,\n      ignoreDuplicateSlashes: true,\n      defaultRoute: (req, res) => {\n        this.logManager.error(req.url + ' not found');  \n        res.statusCode = 404;\n        res.end();\n      }\n    });\n\n    //to change the query string parser (eg to qs):\n    // const qs = require('qs')\n    // const r = FindMyWay({\n    //   .......\n    //   querystringParser: str => qs.parse(str)\n    // })\n\n    const builder = new Builder(this.logManager, this.configuration.routesFolder);\n   \n\n    for (const routeInfo of builder.routes) {\n      // console.log(routeInfo);\n\n      const routeClassType = await import(routeInfo.filePath);      \n      \n      let routeClassImported: any;\n      if (routeClassType.default) {\n        routeClassImported = routeClassType.default\n      } else {\n        for (const obj of Object.keys(routeClassType)) {\n          if (obj.toLowerCase() === routeInfo.className.toLowerCase()) {\n            routeClassImported = routeClassType[obj];\n          }\n        }\n      }\n\n      //console.log(routeInfo.filePath, routeInfo.className, Object.keys(routeClassType), routeClassType);\n      const routeClass = new routeClassImported(this.appContext);\n      const _self = this;\n      for (const method of routeInfo.methods) {\n        r.on(method.restMethod, routeInfo.route, async function (req: any, res: any, params: any, store: any, searchParams: any) {\n          _self.handleRoute(req, res, params, searchParams, method, routeClass, this); //requestContext = this is set as 3rd parameter of lookup\n        });\n      }\n    }\n\n    this.router = r;\n  }\n\n  private async handleRoute(req: IncomingMessage, res: ServerResponse, params, searchParams, method: MethodInfo, routeClass: any, requestContext: RequestContext) {\n    \n    let skipValidation = false;\n\n    let body: any;\n\n    if (method.aspectsParams) {\n      let validationErrors: string[] = [];\n      \n\n      if (method.restMethod == RestMethod.GET || method.restMethod == RestMethod.DELETE) {\n        skipValidation = routeClass['skipGetInputValidation'];\n        if(!skipValidation) {\n          skipValidation = routeClass['skipDeleteInputValidation'];\n        }\n        \n        if (method.validationRules) {\n          //searchParams is already an object   \n          try {\n            body = this.requestValidator.parseQueryString(method.validationRules, searchParams);\n          } catch (e) {\n            this.logManager.error('Cannot parse body', e);\n            new UnprocessableEntityException('Cannot parse query params').send(res);\n          }  \n        } else {\n          body = searchParams;\n        }\n      } else if (method.restMethod == RestMethod.POST || method.restMethod == RestMethod.PUT) {\n        skipValidation = routeClass['skipPostInputValidation'];\n        if(!skipValidation) {\n          skipValidation = routeClass['skipPutInputValidation'];\n        }\n        try {\n          body = await this.getBody(req);\n        } catch (e) {\n          this.logManager.error('Cannot parse body', e);\n          new UnprocessableEntityException('Cannot parse body').send(res);\n        }\n      }\n\n      if (body) {\n        if (!skipValidation && method.validationRules) {\n          validationErrors = this.requestValidator.validate(method.validationRules, body);\n        }\n\n        if (validationErrors.length > 0 && !skipValidation) {\n          this.logManager.error('Validation errors:\\n' + validationErrors.join('\\n'));\n          new UnprocessableEntityException('Validation errors:\\n' + validationErrors.join('\\n')).send(res);\n        } else {\n          let result: any;\n          try {\n            result = await routeClass[method.name](requestContext, body, params);\n          } catch (err) {\n            console.log(err);\n            new InternalServerErrorException(err.message).send(res);\n          }\n          if (result) {\n            res.end(JSON.stringify(result));\n          }\n        }\n      }\n\n    } else {\n      res.end(JSON.stringify(await routeClass[method.name](requestContext)));\n    }\n  }\n\n  private getBody(request: IncomingMessage): any {\n    return new Promise((resolve) => {\n      const bodyParts: any[] = [];\n      let body;\n      request.on('data', (chunk) => {\n        bodyParts.push(chunk);\n      }).on('end', () => {\n        body = Buffer.concat(bodyParts).toString();\n        resolve(JSON.parse(body));\n      });\n    });\n  }\n  \n  addCustomValidationFunction(name: string, fn: ValidationFunction) {\n    this.requestValidator.addValidationFunction(name, fn);\n  }\n\n  addToAppContext(key: string, value: any) {\n    this.appContext.add(key, value);\n  }\n\n  getRouterMap(): string {\n    return this.router.prettyPrint();\n  }\n\n  async run() {\n    if (this.configuration.key && this.configuration.cert) {\n      this.server = https.createServer((req: IncomingMessage, res: ServerResponse) => {\n        this.handleRequest(req, res);\n      })\n    } else {\n      this.server = http.createServer((req: IncomingMessage, res: ServerResponse) => {\n        this.handleRequest(req, res);\n      })\n    }\n    this.logManager.log('Listening on port: ' + this.configuration.port);\n    this.server.listen(this.configuration.port);\n  }\n\n  //Context\n  async use(fn: MiddlewareFunction): Promise<void> {\n    this.middlewares.push(fn);\n  }\n\n  private async handleRequest(req: IncomingMessage, res: ServerResponse) {\n    let continueProcess = true;\n    const method = req.method && req.method.toUpperCase && req.method.toUpperCase();\n\n    if (method === RestMethod.OPTIONS && req.url) {\n      const handle = this.router.find(method, req.url);\n      if (handle) {\n        continueProcess = false;\n        await handle.handler(req, res, handle.params, handle.store, handle.searchParams);\n      }\n    }\n\n    if (continueProcess && !this.configuration.noCorsMode) {\n      //sets the headers for CORS and handles OPTIONS preflight requests\n      continueProcess = this.corsManager.handleRequest(req, res);\n    }\n\n    let requestContext = new RequestContext(req, res);\n\n    if (continueProcess) {\n      for (const fn of this.middlewares) {\n        try {\n          const r = await fn(req, res, requestContext);\n          if(r) {\n            requestContext = r;\n          }\n        } catch (err) {\n          continueProcess = false;\n          new InternalServerErrorException(err.message).send(res);\n        }        \n      }\n    }\n\n    if (continueProcess) {\n      await this.router.lookup(req, res, requestContext);\n    }\n  }\n\n}"]}