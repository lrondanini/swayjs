{"version":3,"file":"observer.js","sourceRoot":"","sources":["../../src/core/observer.ts"],"names":[],"mappings":";;;AAqBA,MAAa,QAAQ;IAGnB;QAFQ,aAAQ,GAAG,EAAoD,CAAC;IAGxE,CAAC;IAED,IAAI,CAAoB,KAAQ,EAAE,GAAG,IAAsB;QACzD,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;IAC5D,CAAC;IAED,EAAE,CAAoB,KAAQ,EAAE,QAAc;QAC5C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;YAC1B,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,GAAG,IAAI,GAAG,EAAE,CAAC;QACnC,CAAC;QAED,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,GAAG,CAAoB,KAAQ,EAAE,QAAc;QAC7C,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,CAAC;YAC1B,OAAO;QACT,CAAC;QACD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC;IACxC,CAAC;CAEF;AAzBD,4BAyBC","sourcesContent":["\n\n\n  /******\n  * \n  * INITIALIZING A PUBSUB:\n  *  \n  * const pubSub = initPubSub<{\n  *     USER_SIGNED_IN: (email: string) => void;\n  *      USER_LOGGED_OUT: () => void;\n  * }>();\n  * \n  * \n  * ADDING HANDLERS:\n  * pubSub.on(\"USER_SIGNED_IN\", (id: number) => { });\n  * \n  * FIRING EVENTS:\n  * pubSub.emit(\"USER_SIGNED_IN\", 123);\n  * \n  */\n \nexport class Observer<T extends Record<string, (...args: any[]) => void>> {\n  private eventMap = {} as Record<keyof T, Set<(...args: any[]) => void>>;\n  \n  constructor() {\n  }\n\n  emit<K extends keyof T>(event: K, ...args: Parameters<T[K]>) {\n    (this.eventMap[event] ?? []).forEach((cb) => cb(...args));\n  }\n\n  on<K extends keyof T>(event: K, callback: T[K]) {\n    if (!this.eventMap[event]) {\n      this.eventMap[event] = new Set();\n    }\n      \n    this.eventMap[event].add(callback);\n  }\n\n  off<K extends keyof T>(event: K, callback: T[K]) {\n    if (!this.eventMap[event]) {\n      return;\n    }\n    this.eventMap[event].delete(callback);\n  }\n\n}\n\n\n\n  // initPubSub<T extends Record<string, (...args: any[]) => void>>() {\n  //   const eventMap = {} as Record<keyof T, Set<(...args: any[]) => void>>;\n  \n  //   return {\n  //     emit: <K extends keyof T>(event: K, ...args: Parameters<T[K]>) => {\n  //       (eventMap[event] ?? []).forEach((cb) => cb(...args));\n  //     },\n  \n  //     on: <K extends keyof T>(event: K, callback: T[K]) => {\n  //       if (!eventMap[event]) {\n  //         eventMap[event] = new Set();\n  //       }\n  \n  //       eventMap[event].add(callback);\n  //     },\n  \n  //     off: <K extends keyof T>(event: K, callback: T[K]) => {\n  //       if (!eventMap[event]) {\n  //         return;\n  //       }\n  \n  //       eventMap[event].delete(callback);\n  //     },\n  //   };\n  // }"]}