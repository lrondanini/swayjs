{"version":3,"file":"builder.js","sourceRoot":"","sources":["../../src/core/builder.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\nimport Logger from './logger';\nimport { Project } from \"ts-morph\";\nimport { RestMethod } from './types';\nimport ValidatorFactory, { PropRules } from './validator/builder';\n\n\nexport interface MethodInfo {\n  name: string;\n  restMethod: RestMethod;\n  aspectsParams: boolean;\n  aspectsRouteParams: boolean;\n  paramType?: string;\n  paramTypeImportFile?: string;\n  validationRules?: PropRules;\n  routeParamsValidationRules?: PropRules;\n  rawType?: any;\n}\n\n\nexport interface RouteInfo {\n  filePath: string;\n  className: string;\n  methods: MethodInfo[];\n  route: string;\n  hasBranchMiddleware: boolean;\n}\n\nexport default class Builder {\n  private logManager: Logger;\n  routes: RouteInfo[];\n\n  constructor(logManager: Logger, routesFolder?: string) {\n    this.logManager = logManager;\n\n    const root = process.cwd();\n    let routesDirectory = path.join(root, 'routes');\n    if (routesFolder) {\n      routesDirectory = path.join(root, routesFolder);\n    }\n\n    if (fs.existsSync(routesDirectory)) {\n      this.parseRoutes(routesDirectory);\n    } else {\n      throw new Error('Cannot find routes directory in ' + routesDirectory);\n    }\n  }\n\n  private parseRoutes(routesDirectory: string) {\n    const project = new Project();\n    const sourceFiles = project.addSourceFilesAtPaths(`${routesDirectory}/**/*.ts`);\n\n\n    if (sourceFiles.length == 0) {\n      throw new Error(`No .ts file found in ${routesDirectory}`);\n    }\n    const routesInfos: RouteInfo[] = [];\n    const parsedRoutes: string[] = [];\n\n    sourceFiles.forEach((sourceFile) => {\n      // console.log(sourceFile.getFilePath());\n      const classes = sourceFile.getClasses();\n      classes.forEach((classDef) => {\n        classDef.getImplements().forEach((impl) => {\n          const typeInfo = impl.getType().getText();\n          // console.log(classDef.getName(), typeInfo);\n          if (typeInfo.toLowerCase().includes('swayjs')) {\n            const info = typeInfo.split(\".\");\n            if (info[1].toLowerCase() === 'route') {\n              let methodsInfos: MethodInfo[] = [];\n              const methods = classDef.getMethods();\n              let noServingMethods = true;\n              let hasBranchMiddleware = false;\n              methods.forEach((method) => {\n                let skip = false;\n                const methodInfo: MethodInfo = {\n                  name: method.getName(),\n                  restMethod: RestMethod.GET,\n                  aspectsParams: false,\n                  aspectsRouteParams: false,\n                }\n\n                if (method.getName().toLowerCase() == 'get') {\n                  noServingMethods = false;\n                  methodInfo.restMethod = RestMethod.GET;\n                } else if (method.getName().toLowerCase() == 'post') {\n                  noServingMethods = false;\n                  methodInfo.restMethod = RestMethod.POST;\n                } else if (method.getName().toLowerCase() == 'put') {\n                  noServingMethods = false;\n                  methodInfo.restMethod = RestMethod.PUT;\n                } else if (method.getName().toLowerCase() == 'delete') {\n                  noServingMethods = false;\n                  methodInfo.restMethod = RestMethod.DELETE;\n                } else if (method.getName().toLowerCase() == 'options') {\n                  noServingMethods = false;\n                  methodInfo.restMethod = RestMethod.OPTIONS;\n                } else if (method.getName().toLowerCase() == 'patch') {\n                  noServingMethods = false;\n                  methodInfo.restMethod = RestMethod.PATCH;\n                } else {\n                  skip = true;\n                  if (method.getName().toLowerCase() == 'branchmiddleware') {\n                    hasBranchMiddleware = true;\n                  }\n                }\n\n                // console.log(skip, method.getName(), method.getText());\n\n                if (!skip) {\n                  let i = 0; //skip first parameter (it's always the request context - RequestContext)\n                  const vFactory = new ValidatorFactory()\n                  method.getParameters().forEach((param) => {\n                    if (i == 1) {\n                      //body/query params\n                      methodInfo.aspectsParams = true;\n                      methodInfo.validationRules = vFactory.parseParameter(param, project.getTypeChecker());\n                      const paramType = project.getTypeChecker().getTypeAtLocation(param);\n                      methodInfo.rawType = paramType;\n                    } else if (i == 2) {\n                      //route params\n                      methodInfo.aspectsRouteParams = true;\n                      //we do not validate route params, also the type of RouteParams is internal to swayjs framework\n                      // methodInfo.routeParamsValidationRules = vFactory.parseParameter(param, project.getTypeChecker());\n                    }\n                    i++;\n                  });\n                  methodsInfos.push(methodInfo);\n                }\n              });\n              if (noServingMethods) {\n                throw new Error(`Route at ${sourceFile.getFilePath()} does not have a valid method name. Method name must be one of the following: Get, Post, Put, Delete`);\n              }\n\n              const fileName = path.basename(sourceFile.getFilePath());\n              const extension = path.extname(fileName);\n              let routeName = fileName.replace(extension, '');\n\n              if (routeName[0] == '[' && routeName[routeName.length - 1] == ']') {\n                routeName = \":\" + routeName.slice(1, -1); //route params\n              }\n              let route = path.dirname(sourceFile.getFilePath().replace(routesDirectory, ''));\n              route = route.replace(/\\[(.*?)\\]/g, ':$1'); //route params\n\n              // console.log(sourceFile.getFilePath(), route, routeName);\n              if (routeName.toLowerCase() != 'index') {\n                route = path.join(route, routeName);\n              }\n              if (parsedRoutes.includes(route)) {\n                throw new Error(`Route \"${route}\" declared multiple times`);\n              } else {\n                parsedRoutes.push(route);\n              }\n              routesInfos.push({\n                filePath: sourceFile.getFilePath(),\n                route: route,\n                className: classDef.getName() || '',\n                hasBranchMiddleware: hasBranchMiddleware,\n                methods: methodsInfos\n              })\n            }\n          }\n        });\n      });\n\n    });\n    // console.log(routesInfos);\n    this.routes = routesInfos;\n  }\n}"]}