{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../src/core/logger.ts"],"names":[],"mappings":";;AAUA,MAAqB,MAAM;IAGzB,YAAY,UAAoB;QAC9B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;IAC/B,CAAC;IAEM,GAAG,CAAC,OAAY,EAAE,GAAG,cAAqB;QAC/C,IAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YACnB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QAC/C,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,cAAc,CAAC,CAAC;QAC1C,CAAC;IACH,CAAC;IAEM,KAAK,CAAC,OAAY,EAAE,GAAG,cAAqB;QACjD,IAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YACnB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QACjD,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,cAAc,CAAC,CAAC;QAC5C,CAAC;IACH,CAAC;IAEM,KAAK,CAAC,OAAY,EAAE,GAAG,cAAqB;QACjD,IAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YACnB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QACjD,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,cAAc,CAAC,CAAC;QAC5C,CAAC;IACH,CAAC;IAEM,IAAI,CAAC,OAAY,EAAE,GAAG,cAAqB;QAChD,IAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YACnB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QAChD,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,IAAI,CAAC,OAAO,EAAE,GAAG,cAAc,CAAC,CAAC;QAC3C,CAAC;IACH,CAAC;IAEM,KAAK,CAAC,OAAY,EAAE,GAAG,cAAqB;QACjD,IAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YACnB,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QACjD,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,KAAK,CAAC,OAAO,EAAE,GAAG,cAAc,CAAC,CAAC;QAC5C,CAAC;IACH,CAAC;IAEM,OAAO,CAAC,OAAY,EAAE,GAAG,cAAqB;QACnD,IAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YACnB,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,cAAc,CAAC,CAAC;QACnD,CAAC;aAAM,CAAC;YACN,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,GAAG,cAAc,CAAC,CAAC;QAC1C,CAAC;IACH,CAAC;CACF;AAtDD,yBAsDC","sourcesContent":["\nexport interface ILogger {\n  log(message: any, ...optionalParams: any[]) : void;\n  fatal(message: any, ...optionalParams: any[]) : void;\n  error(message: any, ...optionalParams: any[]) : void;\n  warn(message: any, ...optionalParams: any[])  : void;\n  debug(message: any, ...optionalParams: any[]) : void;\n  verbose(message: any, ...optionalParams: any[]) : void;\n}\n\nexport default class Logger {\n  private logManager: ILogger;\n\n  constructor(logManager?: ILogger) {\n    this.logManager = logManager;\n  }\n\n  public log(message: any, ...optionalParams: any[]): void {\n    if(this.logManager) {\n      this.logManager.log(message, optionalParams);\n    } else {\n      console.log(message, ...optionalParams);\n    }\n  }\n\n  public fatal(message: any, ...optionalParams: any[]): void {\n    if(this.logManager) {\n      this.logManager.error(message, optionalParams);\n    } else {\n      console.error(message, ...optionalParams);\n    }\n  }\n\n  public error(message: any, ...optionalParams: any[]): void {\n    if(this.logManager) {\n      this.logManager.error(message, optionalParams);\n    } else {\n      console.error(message, ...optionalParams);\n    }\n  }\n\n  public warn(message: any, ...optionalParams: any[]): void {\n    if(this.logManager) {\n      this.logManager.warn(message, optionalParams);\n    } else {\n      console.warn(message, ...optionalParams);\n    }\n  }\n\n  public debug(message: any, ...optionalParams: any[]): void {\n    if(this.logManager) {\n      this.logManager.debug(message, optionalParams);\n    } else {\n      console.debug(message, ...optionalParams);\n    }\n  }\n\n  public verbose(message: any, ...optionalParams: any[]): void {\n    if(this.logManager) {\n      this.logManager.verbose(message, optionalParams);\n    } else {\n      console.log(message, ...optionalParams);\n    }\n  }\n}"]}