{"version":3,"file":"logger.js","sourceRoot":"","sources":["../../src/core/logger.ts"],"names":[],"mappings":"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","sourcesContent":["\nexport interface ILogger {\n  log(message: any, ...optionalParams: any[]): void;\n  fatal(message: any, ...optionalParams: any[]): void;\n  error(message: any, ...optionalParams: any[]): void;\n  warn(message: any, ...optionalParams: any[]): void;\n  debug(message: any, ...optionalParams: any[]): void;\n  verbose(message: any, ...optionalParams: any[]): void;\n}\n\nexport default class Logger {\n  private logManager: ILogger;\n\n  constructor(logManager?: ILogger) {\n    this.logManager = logManager;\n  }\n\n  public log(message: any, ...optionalParams: any[]): void {\n    if (this.logManager) {\n      this.logManager.log(message, optionalParams);\n    } else {\n      console.log(message, ...optionalParams);\n    }\n  }\n\n  public fatal(message: any, ...optionalParams: any[]): void {\n    if (this.logManager) {\n      this.logManager.error(message, optionalParams);\n    } else {\n      console.error(message, ...optionalParams);\n    }\n  }\n\n  public error(message: any, ...optionalParams: any[]): void {\n    if (this.logManager) {\n      this.logManager.error(message, optionalParams);\n    } else {\n      console.error(message, ...optionalParams);\n    }\n  }\n\n  public warn(message: any, ...optionalParams: any[]): void {\n    if (this.logManager) {\n      this.logManager.warn(message, optionalParams);\n    } else {\n      console.warn(message, ...optionalParams);\n    }\n  }\n\n  public debug(message: any, ...optionalParams: any[]): void {\n    if (this.logManager) {\n      this.logManager.debug(message, optionalParams);\n    } else {\n      console.debug(message, ...optionalParams);\n    }\n  }\n\n  public verbose(message: any, ...optionalParams: any[]): void {\n    if (this.logManager) {\n      this.logManager.verbose(message, optionalParams);\n    } else {\n      console.log(message, ...optionalParams);\n    }\n  }\n}\n\nexport class RequestLogger {\n  private logManager: Logger;\n  private startTime: number;\n  private isError: boolean = false;\n  private errorNumber: number;\n  private errorType: string;\n\n  constructor(logManager?: ILogger) {\n    this.logManager = new Logger(logManager);\n    this.startTime = performance.now();\n  }\n\n  setError(errorNumber: number, errorType: string): void {\n    this.isError = true;\n    this.errorNumber = errorNumber;\n    this.errorType = errorType;\n  }\n\n  private getExecTime(): string {\n    const endTime = performance.now();\n    const timeDiff = endTime - this.startTime; //in ms \n    return timeDiff.toFixed(0) + 'ms';\n  }\n\n  private getDateTime(): string {\n    const t = new Date();\n    var hours = t.getHours();\n    var minutes = t.getMinutes();\n    var ampm = hours >= 12 ? 'pm' : 'am';\n    hours = hours % 12;\n    hours = hours ? hours : 12; // the hour '0' should be '12'\n    var mn = minutes < 10 ? '0' + minutes : minutes;\n    var strTime = `${hours}:${mn}:${t.getSeconds()} ${ampm}`;\n\n    return `${t.getDate()}/${t.getMonth()}/${t.getFullYear()} ${strTime}`;\n  }\n\n  public log(req: any): void {\n    const reset = \"\\x1b[0m\"\n    // const bright = \"\\x1b[1m\"\n    // const dim = \"\\x1b[2m\"\n    // const underscore = \"\\x1b[4m\"\n    // const blink = \"\\x1b[5m\"\n    // const reverse = \"\\x1b[7m\"\n    // const hidden = \"\\x1b[8m\"\n\n    // const black = \"\\x1b[30m\"\n    const red = \"\\x1b[31m\"\n    const green = \"\\x1b[32m\"\n    const yellow = \"\\x1b[33m\"\n    // const blue = \"\\x1b[34m\"\n    // const magenta = \"\\x1b[35m\"\n    // const cyan = \"\\x1b[36m\"\n    // const white = \"\\x1b[37m\"\n\n    // const BGblack = \"\\x1b[40m\"\n    // const BGred = \"\\x1b[41m\"\n    // const BGgreen = \"\\x1b[42m\"\n    // const BGyellow = \"\\x1b[43m\"\n    // const BGblue = \"\\x1b[44m\"\n    // const BGmagenta = \"\\x1b[45m\"\n    // const BGcyan = \"\\x1b[46m\"\n    // const BGwhite = \"\\x1b[47m\"\n    if (this.isError) {\n      const msg = `${reset}${this.getDateTime()} ${red}ERROR ${yellow}[HTTP] ${red}${req.method} ${req.url} ${this.errorNumber} ${this.errorType} ${yellow}${this.getExecTime()}${reset}`;\n      this.logManager.error(msg);\n    } else {\n      const msg = `${reset}${this.getDateTime()} ${green}LOG ${yellow}[HTTP] ${green}${req.method} ${req.url} 201 ${yellow}${this.getExecTime()}${reset}`;\n      this.logManager.log(msg);\n    }\n\n  }\n}\n\n\n\n\n"]}