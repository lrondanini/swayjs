{"version":3,"file":"validator.js","sourceRoot":"","sources":["../../../src/core/validator/validator.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { validateContains, validateFormat, validateIsType, validateMaxLength, validateMinLength } from \"./types-validators\";\nimport { BaseTypes, PropRules, ValidationRule, ValidationRuleSetting } from \"./builder\";\n\nexport type ValidationResults = {\n  passed: boolean;\n  errors: string[];\n}\n\nexport type ValidationFunction = (value: any) => boolean;\n\nexport class Validator {\n  private allSchemas: { [propName: string]: PropRules[] };\n  private customValidationFunctions: { [name: string]: ValidationFunction };\n  private VALIDATE_FUNCTIONS: { [name: string]: Function };\n\n  constructor() {\n    this.allSchemas = {};\n    this.customValidationFunctions = {};\n\n    this.VALIDATE_FUNCTIONS = {};\n    this.VALIDATE_FUNCTIONS[ValidationRule.IsType] = validateIsType;\n    this.VALIDATE_FUNCTIONS[ValidationRule.MaxLength] = validateMaxLength;\n    this.VALIDATE_FUNCTIONS[ValidationRule.MinLength] = validateMinLength;\n    this.VALIDATE_FUNCTIONS[ValidationRule.Contains] = validateContains;\n    this.VALIDATE_FUNCTIONS[ValidationRule.Format] = validateFormat;\n    this.VALIDATE_FUNCTIONS[ValidationRule.Custom] = this.validateWithCustomFunction.bind(this);\n  }\n\n  addSchema(route: string, methodName: string, rules: PropRules[]) {\n    this.allSchemas[route + \"-\" + methodName] = rules;\n  }\n\n  addValidationFunction(name: string, func: ValidationFunction) {\n    this.customValidationFunctions[name] = func;\n  }\n\n  private validateWithCustomFunction(value: any, rule: ValidationRuleSetting): boolean {\n    const func = this.customValidationFunctions[rule.value as string];\n    if (func) {\n      return func(value);\n    }\n    return false;\n  }\n\n  testValidation(schemaName: string, methodName: string, json: any): ValidationResults {\n    const props = this.allSchemas[schemaName + \"-\" + methodName]; //PropRules[]\n\n    let errors: string[] = [];\n\n    for (let k = 0; k < props.length; k++) {\n      const p = props[k];\n      // console.log(JSON.stringify(p));\n      // const value: any = json[p.propName];\n\n\n      errors = [...errors, ...this.validate(p, json)];\n    }\n\n    console.log(errors);\n\n    return {\n      passed: errors.length === 0 ? true : false,\n      errors: errors\n    };\n  }\n\n  parseQueryString(p: PropRules, value: any): any {\n\n    let parsedValue = value;\n\n    for (let i = 0; i < p.rules.and.length; i++) {\n      const r = p.rules.and[i];\n      if (r.rule === ValidationRule.IsObject) {\n        if(typeof value === 'string') {\n          value = JSON.parse(value);\n        } \n        parsedValue = this.parseQueryString_Object(value, r);\n      } else if (r.rule === ValidationRule.IsArray) {\n        if(typeof value === 'string' && r.type != BaseTypes.String) {\n          value = JSON.parse(value);\n        } \n        parsedValue = this.parseQueryString_Array(value, r);\n      } else if(r.rule === ValidationRule.IsType) {\n        if (r.type === BaseTypes.Number) {\n          if(typeof value === 'string') {\n            parsedValue = JSON.parse(value);\n          } \n        } else if (r.type === BaseTypes.Boolean) {\n          if(typeof value === 'string') {\n            parsedValue = parsedValue.toLowerCase() === 'true' ? true : false;\n          } \n        } \n      }\n    }\n\n\n    for (let j = 0; j < p.rules.or.length; j++) {\n      const orR = p.rules.or[j];\n      for (const r of orR) {\n          if (r.rule === ValidationRule.IsObject) {\n            if(typeof value === 'string') {\n              value = JSON.parse(value);\n            } \n            parsedValue = this.parseQueryString_Object(value, r);\n          } else if (r.rule === ValidationRule.IsArray) {\n            if(typeof value === 'string' && r.type != BaseTypes.String) {\n              value = JSON.parse(value);\n            } \n            parsedValue = this.parseQueryString_Array(value, r);\n          } else if(r.rule === ValidationRule.IsType) {\n            if (r.type === BaseTypes.Number) {\n              if(typeof value === 'string') {\n                parsedValue = JSON.parse(value);\n              } \n            } else if (r.type === BaseTypes.Boolean) {\n              if(typeof value === 'string') {\n                parsedValue = parsedValue.toLowerCase() === 'true' ? true : false;\n              } \n            } \n          }\n      }\n    }\n\n    return parsedValue;\n    \n  }\n\n  private parseValue(value: any, r: ValidationRuleSetting): any {\n\n    let parsedValue = value;\n\n    if (r.rule === ValidationRule.IsObject) {\n      if(typeof value === 'string') {\n        value = JSON.parse(value);\n      } \n      parsedValue = this.parseQueryString_Object(value, r);\n    } else if (r.rule === ValidationRule.IsArray) {\n      if(typeof value === 'string' && r.type != BaseTypes.String) {\n        value = JSON.parse(value);\n      } \n      parsedValue = this.parseQueryString_Array(value, r);\n    } else if(r.rule === ValidationRule.IsType) {\n      if (r.type === BaseTypes.Number) {\n        if(typeof value === 'string') {\n          parsedValue = JSON.parse(value);\n        } \n      } else if (r.type === BaseTypes.Boolean) {\n        if(typeof value === 'string') {\n          parsedValue = parsedValue.toLowerCase() === 'true' ? true : false;\n        } \n      } \n    }\n\n    return parsedValue;\n  }\n\n  private parseQueryString_Object(json: any, rule: ValidationRuleSetting): any {\n    let parsedValue = json;\n\n    const rules: any = rule.rules;\n    for (let k = 0; k < rules.length; k++) {\n      const p = rules[k];\n      let value: any = json[p.propName];    \n      if(value === undefined) {\n        value = json[p.propName+\"[]\"];  \n      } \n      parsedValue[p.propName] = this.parseQueryString(p, value);      \n    }\n\n    return parsedValue;\n  }\n\n  private parseQueryString_Array(value: any, rule: ValidationRuleSetting): any {\n\n    let parsedValue = value;\n\n    const exptectedType = rule.type;\n    if (Array.isArray(value)) {\n      if (exptectedType === BaseTypes.Object) {\n        let tmp: any[] = [];\n        for (var i = 0; i < value.length; i++) {\n          tmp.push(this.parseQueryString_Object(value[i], rule));\n        }\n        parsedValue = tmp;\n      } else {\n        let tmp: any[] = [];\n        for (var i = 0; i < value.length; i++) {\n          tmp.push(this.parseValue(value[i], rule));          \n        }\n        parsedValue = tmp;\n      }\n    } \n    return parsedValue;\n  }\n\n  /***************************************/\n  /**********  VALIDATION FUNCTIONS ******/\n  /***************************************/\n\n  validate(p: PropRules, value: any): string[] {\n    let errors: string[] = [];\n\n    if (p.optional && value === undefined) {\n      return errors;\n    }\n\n    if (!p.optional && value === undefined) {\n      errors.push(`${p.propName}: is required`)\n      return errors;\n    }\n\n    const validationCache: { [key: string]: boolean } = {};\n    for (let i = 0; i < p.rules.and.length; i++) {\n      const r = p.rules.and[i];\n      const key = r.key;\n      if (validationCache[key]) {\n        continue;\n      } else {\n        let passed = false;\n        if (r.rule === ValidationRule.IsObject) {\n          passed = this.validateObject(value, r, errors);\n        } else if (r.rule === ValidationRule.IsArray) {\n          passed = this.validateIsArray(value, r, errors);\n        } else {\n          passed = this.VALIDATE_FUNCTIONS[r.rule](value, r);\n          if (!passed) {\n            errors.push(`${p.propName}: expected ${r.rule} ${r.type ? JSON.stringify(r.type) : ''} ${r.fullType ? JSON.stringify(r.fullType) : ''} ${r.value ? JSON.stringify(r.value) + ' ' : ' '}to pass found: ${JSON.stringify(value)}`)\n          }\n        }\n        validationCache[key] = passed;\n      }\n    }\n\n    let orErrors: string[] = [];\n    for (let j = 0; j < p.rules.or.length; j++) {\n      const orR = p.rules.or[j];\n      let tmpErrors: any[] = [];\n      for (const r of orR) {\n        const key = r.key;\n        if (validationCache[key]) {\n          continue;\n        } else {\n          let passed = false;\n          if (r.rule === ValidationRule.IsObject) {\n            passed = this.validateObject(value, r, errors);\n          } else if (r.rule === ValidationRule.IsArray) {\n            passed = this.validateIsArray(value, r, errors);\n          } else {\n            passed = this.VALIDATE_FUNCTIONS[r.rule](value, r);\n            if (!passed) {\n              tmpErrors.push(`${p.propName}: expected ${r.rule} ${r.type ? JSON.stringify(r.type) : ''} ${r.fullType ? JSON.stringify(r.fullType) : ''} ${r.value ? JSON.stringify(r.value) + ' ' : ' '}to pass found: ${JSON.stringify(value)}`)\n            }\n          }\n          validationCache[key] = passed;\n        }\n      }\n      if (tmpErrors.length === 0) {\n        //we have at least one matching set of rules\n        orErrors = [];\n        break;\n      } else {\n        orErrors.push(...tmpErrors);\n      }\n    }\n    return [...orErrors, ...errors];\n  }\n\n\n  print() {\n    for (const name of Object.keys(this.allSchemas)) {\n      console.log(name);\n      const rules = this.allSchemas[name];\n      for (const r of rules) {\n        // console.log(r);\n        const optional = r.optional ? '(optional)' : ''\n        console.log('   ' + r.propName + ' ' + optional)\n\n        console.log(JSON.stringify(this.allSchemas), '\\n\\n');\n      }\n    }\n  }\n\n  private validateObject(json: any, rule: ValidationRuleSetting, errors: string[]): boolean {\n    const rules: any = rule.rules;\n    let err: string[] = [];\n    for (let k = 0; k < rules.length; k++) {\n      const p = rules[k];\n      const value: any = json[p.propName];      \n      err = this.validate(p, value);\n      errors.push(...err);\n    }\n    return err.length === 0 ? true : false;\n  }\n\n\n  private validateIsArray(value: any, rule: ValidationRuleSetting, errors: string[]): boolean {\n    const exptectedType = rule.type;\n    if (Array.isArray(value)) {\n      if (exptectedType === BaseTypes.Any) {\n        return true;\n      } else if (exptectedType === BaseTypes.Enum) {\n        const possibleValues = rule.value as string[];\n        for (const i of value) {\n          if (possibleValues.indexOf(i) === -1) {\n            errors.push(`Array contains values not allowed: ${JSON.stringify(value)}`);\n            return false;\n          }\n        }\n      } else if (exptectedType === BaseTypes.Object) {\n        for (var i = 0; i < value.length; i++) {\n          this.validateObject(value[i], rule, errors);\n        }\n        return errors.length === 0 ? true : false;\n      } else {\n        for (const i of value) {\n          if (typeof i !== exptectedType) {\n            errors.push(`Array not well formed: ${JSON.stringify(value)}`);\n            return false;\n          }\n        }\n      }\n      return true;\n    } \n\n    errors.push(`Not an array: ${JSON.stringify(value)}`);\n    return false;\n  }\n\n}"]}